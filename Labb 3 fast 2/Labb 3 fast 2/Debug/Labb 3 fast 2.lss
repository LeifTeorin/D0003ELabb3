
Labb 3 fast 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000072e  000007c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000072e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022d  00800120  00800120  000007e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001315  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afb  00000000  00000000  00001c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000760  00000000  00000000  0000272c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00002e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a6  00000000  00000000  0000315c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a91  00000000  00000000  00003702  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004193  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee e2       	ldi	r30, 0x2E	; 46
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 32       	cpi	r26, 0x20	; 32
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a0 e2       	ldi	r26, 0x20	; 32
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ad 34       	cpi	r26, 0x4D	; 77
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <main>
  92:	0c 94 95 03 	jmp	0x72a	; 0x72a <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_init>:
		writeChar(ch, cntr); // skriv siffran till höger
		y = y/10; // vi tar bort siffran längst till höger
		cntr--; // vi börjar till höger och går sedan åt vänster därifrån
	}
	
}
  9a:	e4 ee       	ldi	r30, 0xE4	; 228
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	80 83       	st	Z, r24
  a4:	87 eb       	ldi	r24, 0xB7	; 183
  a6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
  aa:	e7 ee       	ldi	r30, 0xE7	; 231
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8f 60       	ori	r24, 0x0F	; 15
  b2:	80 83       	st	Z, r24
  b4:	87 e0       	ldi	r24, 0x07	; 7
  b6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
  ba:	08 95       	ret

000000bc <writeChar>:
  bc:	66 30       	cpi	r22, 0x06	; 6
  be:	71 05       	cpc	r23, r1
  c0:	b8 f5       	brcc	.+110    	; 0x130 <writeChar+0x74>
  c2:	8a 30       	cpi	r24, 0x0A	; 10
  c4:	48 f4       	brcc	.+18     	; 0xd8 <writeChar+0x1c>
  c6:	e8 2f       	mov	r30, r24
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	ee 0f       	add	r30, r30
  cc:	ff 1f       	adc	r31, r31
  ce:	e0 50       	subi	r30, 0x00	; 0
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	40 81       	ld	r20, Z
  d4:	51 81       	ldd	r21, Z+1	; 0x01
  d6:	02 c0       	rjmp	.+4      	; 0xdc <writeChar+0x20>
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	60 ff       	sbrs	r22, 0
  de:	03 c0       	rjmp	.+6      	; 0xe6 <writeChar+0x2a>
  e0:	af e0       	ldi	r26, 0x0F	; 15
  e2:	b4 e0       	ldi	r27, 0x04	; 4
  e4:	02 c0       	rjmp	.+4      	; 0xea <writeChar+0x2e>
  e6:	a0 ef       	ldi	r26, 0xF0	; 240
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	75 95       	asr	r23
  ec:	67 95       	ror	r22
  ee:	fb 01       	movw	r30, r22
  f0:	e4 51       	subi	r30, 0x14	; 20
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	18 c0       	rjmp	.+48     	; 0x12a <writeChar+0x6e>
  fa:	84 2f       	mov	r24, r20
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0b 2e       	mov	r0, r27
 102:	02 c0       	rjmp	.+4      	; 0x108 <writeChar+0x4c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <writeChar+0x48>
 10c:	90 81       	ld	r25, Z
 10e:	9a 23       	and	r25, r26
 110:	89 2b       	or	r24, r25
 112:	80 83       	st	Z, r24
 114:	55 95       	asr	r21
 116:	47 95       	ror	r20
 118:	55 95       	asr	r21
 11a:	47 95       	ror	r20
 11c:	55 95       	asr	r21
 11e:	47 95       	ror	r20
 120:	55 95       	asr	r21
 122:	47 95       	ror	r20
 124:	35 96       	adiw	r30, 0x05	; 5
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	24 30       	cpi	r18, 0x04	; 4
 12c:	31 05       	cpc	r19, r1
 12e:	2c f3       	brlt	.-54     	; 0xfa <writeChar+0x3e>
 130:	08 95       	ret

00000132 <printAt>:

void printAt(long num, int pos) {
 132:	8f 92       	push	r8
 134:	9f 92       	push	r9
 136:	af 92       	push	r10
 138:	bf 92       	push	r11
 13a:	cf 92       	push	r12
 13c:	df 92       	push	r13
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	4b 01       	movw	r8, r22
 148:	5c 01       	movw	r10, r24
 14a:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( ((num % 100) / 10), pp);
 14c:	24 e6       	ldi	r18, 0x64	; 100
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	0e 94 13 03 	call	0x626	; 0x626 <__divmodsi4>
 158:	0f 2e       	mov	r0, r31
 15a:	fa e0       	ldi	r31, 0x0A	; 10
 15c:	cf 2e       	mov	r12, r31
 15e:	d1 2c       	mov	r13, r1
 160:	e1 2c       	mov	r14, r1
 162:	f1 2c       	mov	r15, r1
 164:	f0 2d       	mov	r31, r0
 166:	a7 01       	movw	r20, r14
 168:	96 01       	movw	r18, r12
 16a:	0e 94 13 03 	call	0x626	; 0x626 <__divmodsi4>
 16e:	82 2f       	mov	r24, r18
 170:	be 01       	movw	r22, r28
 172:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
	pp++;
 176:	21 96       	adiw	r28, 0x01	; 1
	writeChar( (num % 10), pp);
 178:	c5 01       	movw	r24, r10
 17a:	b4 01       	movw	r22, r8
 17c:	a7 01       	movw	r20, r14
 17e:	96 01       	movw	r18, r12
 180:	0e 94 13 03 	call	0x626	; 0x626 <__divmodsi4>
 184:	86 2f       	mov	r24, r22
 186:	be 01       	movw	r22, r28
 188:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	bf 90       	pop	r11
 19a:	af 90       	pop	r10
 19c:	9f 90       	pop	r9
 19e:	8f 90       	pop	r8
 1a0:	08 95       	ret

000001a2 <blink>:
		}
	}
}

void blink(void){
	int light = 0; // light bestämmer om lampan är av eller på
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1){
		lock(&m1);
 1a6:	84 e2       	ldi	r24, 0x24	; 36
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 d5 02 	call	0x5aa	; 0x5aa <lock>
		if(timekeeper){
 1ae:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timekeeper>
 1b2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timekeeper+0x1>
 1b6:	89 2b       	or	r24, r25
 1b8:	b1 f3       	breq	.-20     	; 0x1a6 <blink+0x4>
			if(light){
 1ba:	20 97       	sbiw	r28, 0x00	; 0
 1bc:	41 f0       	breq	.+16     	; 0x1ce <blink+0x2c>
				printAt(0, 2); // om den ?r p? sl?r vi av den
 1be:	42 e0       	ldi	r20, 0x02	; 2
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	cb 01       	movw	r24, r22
 1c8:	0e 94 99 00 	call	0x132	; 0x132 <printAt>
 1cc:	08 c0       	rjmp	.+16     	; 0x1de <blink+0x3c>
				}else{
				printAt(69, 2); // annars sl?r vi p? den
 1ce:	42 e0       	ldi	r20, 0x02	; 2
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	65 e4       	ldi	r22, 0x45	; 69
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 99 00 	call	0x132	; 0x132 <printAt>
			}
			light = ~light; // vi ?ndrar light f?r att indikera att lampan ?r av/p?
 1de:	c0 95       	com	r28
 1e0:	d0 95       	com	r29
			timekeeper = 0;
 1e2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <timekeeper+0x1>
 1e6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <timekeeper>
 1ea:	dd cf       	rjmp	.-70     	; 0x1a6 <blink+0x4>

000001ec <button>:

void button(void)
{
	int buttonpress = 0;
	int lastvalue = 0;
	printAt(80, 4);
 1ec:	44 e0       	ldi	r20, 0x04	; 4
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	60 e5       	ldi	r22, 0x50	; 80
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 99 00 	call	0x132	; 0x132 <printAt>
}

void button(void)
{
	int buttonpress = 0;
	int lastvalue = 0;
 1fc:	00 e0       	ldi	r16, 0x00	; 0
 1fe:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void button(void)
{
	int buttonpress = 0;
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d0 e0       	ldi	r29, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
			}
			lastvalue = ~lastvalue;
		}
		if((PINB&0x80) && buttonpress == 1) // om den inte är nedtryckt blir buttonpress noll
		{
			buttonpress = 0;
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	d0 e0       	ldi	r29, 0x00	; 0
	int buttonpress = 0;
	int lastvalue = 0;
	printAt(80, 4);
	while(1)
	{
		lock(&m2);
 20a:	80 e2       	ldi	r24, 0x20	; 32
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <lock>
		if (buttonpress == 0) // PINB7 = 0, när den är intryckt
 212:	20 97       	sbiw	r28, 0x00	; 0
 214:	c1 f4       	brne	.+48     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
		{									  // vi byter läge endast då knappen är nedtryckt och den nyss inte var det
			buttonpress = 1;
			if (lastvalue) // vi ser om det ena läget är på
 216:	01 15       	cp	r16, r1
 218:	11 05       	cpc	r17, r1
 21a:	49 f0       	breq	.+18     	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
			{
				printAt(80, 4);
 21c:	44 e0       	ldi	r20, 0x04	; 4
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	60 e5       	ldi	r22, 0x50	; 80
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 99 00 	call	0x132	; 0x132 <printAt>
 22c:	08 c0       	rjmp	.+16     	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
			}
			else // annars är det ju det andra läget
			{
				printAt(8, 4);
 22e:	44 e0       	ldi	r20, 0x04	; 4
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	68 e0       	ldi	r22, 0x08	; 8
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 99 00 	call	0x132	; 0x132 <printAt>
			}
			lastvalue = ~lastvalue;
 23e:	00 95       	com	r16
 240:	10 95       	com	r17
	while(1)
	{
		lock(&m2);
		if (buttonpress == 0) // PINB7 = 0, när den är intryckt
		{									  // vi byter läge endast då knappen är nedtryckt och den nyss inte var det
			buttonpress = 1;
 242:	c1 e0       	ldi	r28, 0x01	; 1
 244:	d0 e0       	ldi	r29, 0x00	; 0
			{
				printAt(8, 4);
			}
			lastvalue = ~lastvalue;
		}
		if((PINB&0x80) && buttonpress == 1) // om den inte är nedtryckt blir buttonpress noll
 246:	1f 9b       	sbis	0x03, 7	; 3
 248:	e0 cf       	rjmp	.-64     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 24a:	c1 30       	cpi	r28, 0x01	; 1
 24c:	d1 05       	cpc	r29, r1
 24e:	e9 f6       	brne	.-70     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 250:	da cf       	rjmp	.-76     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>

00000252 <is_prime>:
	writeChar( ((num % 100) / 10), pp);
	pp++;
	writeChar( (num % 10), pp);
}

int is_prime(long i){
 252:	cf 92       	push	r12
 254:	df 92       	push	r13
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	6b 01       	movw	r12, r22
 260:	7c 01       	movw	r14, r24
	for(int x = 2; x < i; x++){
 262:	c2 e0       	ldi	r28, 0x02	; 2
 264:	d0 e0       	ldi	r29, 0x00	; 0
 266:	09 c0       	rjmp	.+18     	; 0x27a <is_prime+0x28>
		if(i%x == 0){
 268:	c7 01       	movw	r24, r14
 26a:	b6 01       	movw	r22, r12
 26c:	0e 94 13 03 	call	0x626	; 0x626 <__divmodsi4>
 270:	67 2b       	or	r22, r23
 272:	68 2b       	or	r22, r24
 274:	69 2b       	or	r22, r25
 276:	71 f0       	breq	.+28     	; 0x294 <is_prime+0x42>
	pp++;
	writeChar( (num % 10), pp);
}

int is_prime(long i){
	for(int x = 2; x < i; x++){
 278:	21 96       	adiw	r28, 0x01	; 1
 27a:	9e 01       	movw	r18, r28
 27c:	0d 2e       	mov	r0, r29
 27e:	00 0c       	add	r0, r0
 280:	44 0b       	sbc	r20, r20
 282:	55 0b       	sbc	r21, r21
 284:	2c 15       	cp	r18, r12
 286:	3d 05       	cpc	r19, r13
 288:	4e 05       	cpc	r20, r14
 28a:	5f 05       	cpc	r21, r15
 28c:	6c f3       	brlt	.-38     	; 0x268 <is_prime+0x16>
		if(i%x == 0){
			return 0;
		}
	}
	return 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <is_prime+0x46>
}

int is_prime(long i){
	for(int x = 2; x < i; x++){
		if(i%x == 0){
			return 0;
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 1;
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	df 90       	pop	r13
 2a2:	cf 90       	pop	r12
 2a4:	08 95       	ret

000002a6 <primes>:

void primes(int i){
 2a6:	cf 92       	push	r12
 2a8:	df 92       	push	r13
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	8c 01       	movw	r16, r24
	for(int x = 2; x < i; x++){
 2b8:	c2 e0       	ldi	r28, 0x02	; 2
 2ba:	d0 e0       	ldi	r29, 0x00	; 0
 2bc:	12 c0       	rjmp	.+36     	; 0x2e2 <primes+0x3c>
		if(is_prime(x)){
 2be:	6e 01       	movw	r12, r28
 2c0:	0d 2e       	mov	r0, r29
 2c2:	00 0c       	add	r0, r0
 2c4:	ee 08       	sbc	r14, r14
 2c6:	ff 08       	sbc	r15, r15
 2c8:	c7 01       	movw	r24, r14
 2ca:	b6 01       	movw	r22, r12
 2cc:	0e 94 29 01 	call	0x252	; 0x252 <is_prime>
 2d0:	89 2b       	or	r24, r25
 2d2:	31 f0       	breq	.+12     	; 0x2e0 <primes+0x3a>
			printAt(x, 0);
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	c7 01       	movw	r24, r14
 2da:	b6 01       	movw	r22, r12
 2dc:	0e 94 99 00 	call	0x132	; 0x132 <printAt>
	}
	return 1;
}

void primes(int i){
	for(int x = 2; x < i; x++){
 2e0:	21 96       	adiw	r28, 0x01	; 1
 2e2:	c0 17       	cp	r28, r16
 2e4:	d1 07       	cpc	r29, r17
 2e6:	5c f3       	brlt	.-42     	; 0x2be <primes+0x18>
		if(is_prime(x)){
			printAt(x, 0);
		}
	}
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	df 90       	pop	r13
 2f6:	cf 90       	pop	r12
 2f8:	08 95       	ret

000002fa <main>:
}

int main(void)
{
	/* Replace with your application code */
	CLKPR = 0x80;
 2fa:	e1 e6       	ldi	r30, 0x61	; 97
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	c0 e8       	ldi	r28, 0x80	; 128
 300:	c0 83       	st	Z, r28
	CLKPR = 0x00;
 302:	10 82       	st	Z, r1
	LCD_init();
 304:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_init>
	PORTB = (1<<PB7);
 308:	c5 b9       	out	0x05, r28	; 5
	EIMSK = 0x80;
 30a:	cd bb       	out	0x1d, r28	; 29
	PCMSK1 = 0x80;
 30c:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	TCCR1A = 0xC0;
 310:	a0 e8       	ldi	r26, 0x80	; 128
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	80 ec       	ldi	r24, 0xC0	; 192
 316:	8c 93       	st	X, r24
	TCCR1B = 0x18;
 318:	e1 e8       	ldi	r30, 0x81	; 129
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	98 e1       	ldi	r25, 0x18	; 24
 31e:	90 83       	st	Z, r25
	
	//OC1A is set high on compare match.
	TCCR1A = (1 << COM1A0) | (1 << COM1A1);
 320:	8c 93       	st	X, r24
	
	// Set timer to CTC and prescale Factor on 1024.
	TCCR1B = (1 << WGM12) | (1 << CS10) |(1 << CS12);
 322:	8d e0       	ldi	r24, 0x0D	; 13
 324:	80 83       	st	Z, r24
	
	// Set Value to around 50ms. 8000000/20480 = 390.625
	OCR1A = 3906;
 326:	82 e4       	ldi	r24, 0x42	; 66
 328:	9f e0       	ldi	r25, 0x0F	; 15
 32a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 32e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	
	//clearing the TCNT1 register during initialization.
	TCNT1 = 0x0;
 332:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 336:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	//Compare a match interrupt Enable.
	TIMSK1 = (1 << OCIE1A);
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
	lock(&m1);
 340:	84 e2       	ldi	r24, 0x24	; 36
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 d5 02 	call	0x5aa	; 0x5aa <lock>
	lock(&m2);
 348:	80 e2       	ldi	r24, 0x20	; 32
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <lock>
	
	spawn(button, 3);
 350:	63 e0       	ldi	r22, 0x03	; 3
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	86 ef       	ldi	r24, 0xF6	; 246
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 70 02 	call	0x4e0	; 0x4e0 <spawn>
	spawn(blink, 2);
 35c:	62 e0       	ldi	r22, 0x02	; 2
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	81 ed       	ldi	r24, 0xD1	; 209
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 70 02 	call	0x4e0	; 0x4e0 <spawn>
	primes(10000);
 368:	80 e1       	ldi	r24, 0x10	; 16
 36a:	97 e2       	ldi	r25, 0x27	; 39
 36c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <primes>
 370:	ff cf       	rjmp	.-2      	; 0x370 <main+0x76>

00000372 <__vector_3>:
	}
}

//om interrupt på pinb7 yielda
ISR(PCINT1_vect)
{
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	2f 93       	push	r18
 37e:	3f 93       	push	r19
 380:	4f 93       	push	r20
 382:	5f 93       	push	r21
 384:	6f 93       	push	r22
 386:	7f 93       	push	r23
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	af 93       	push	r26
 38e:	bf 93       	push	r27
 390:	ef 93       	push	r30
 392:	ff 93       	push	r31
	if ((PINB >> 7) == 1)
 394:	1f 9b       	sbis	0x03, 7	; 3
 396:	04 c0       	rjmp	.+8      	; 0x3a0 <__vector_3+0x2e>
	{
		unlock(&m2);
 398:	80 e2       	ldi	r24, 0x20	; 32
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <unlock>
		
	}
}
 3a0:	ff 91       	pop	r31
 3a2:	ef 91       	pop	r30
 3a4:	bf 91       	pop	r27
 3a6:	af 91       	pop	r26
 3a8:	9f 91       	pop	r25
 3aa:	8f 91       	pop	r24
 3ac:	7f 91       	pop	r23
 3ae:	6f 91       	pop	r22
 3b0:	5f 91       	pop	r21
 3b2:	4f 91       	pop	r20
 3b4:	3f 91       	pop	r19
 3b6:	2f 91       	pop	r18
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <__vector_7>:
//Om timern säger till, yielda

ISR(TIMER1_COMPA_vect)
{
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	2f 93       	push	r18
 3ce:	3f 93       	push	r19
 3d0:	4f 93       	push	r20
 3d2:	5f 93       	push	r21
 3d4:	6f 93       	push	r22
 3d6:	7f 93       	push	r23
 3d8:	8f 93       	push	r24
 3da:	9f 93       	push	r25
 3dc:	af 93       	push	r26
 3de:	bf 93       	push	r27
 3e0:	ef 93       	push	r30
 3e2:	ff 93       	push	r31
	timekeeper = 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timekeeper+0x1>
 3ec:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timekeeper>
	unlock(&m1);
 3f0:	84 e2       	ldi	r24, 0x24	; 36
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <unlock>
	
 3f8:	ff 91       	pop	r31
 3fa:	ef 91       	pop	r30
 3fc:	bf 91       	pop	r27
 3fe:	af 91       	pop	r26
 400:	9f 91       	pop	r25
 402:	8f 91       	pop	r24
 404:	7f 91       	pop	r23
 406:	6f 91       	pop	r22
 408:	5f 91       	pop	r21
 40a:	4f 91       	pop	r20
 40c:	3f 91       	pop	r19
 40e:	2f 91       	pop	r18
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <initialize>:
	DISABLE();
	thread nextthread = dequeue(&readyQ);
	enqueue(current, &readyQ);
	dispatch(nextthread);
	ENABLE();
}
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	15 c0       	rjmp	.+42     	; 0x44a <initialize+0x30>
 420:	ac 01       	movw	r20, r24
 422:	4f 5f       	subi	r20, 0xFF	; 255
 424:	5f 4f       	sbci	r21, 0xFF	; 255
 426:	6d e6       	ldi	r22, 0x6D	; 109
 428:	64 9f       	mul	r22, r20
 42a:	90 01       	movw	r18, r0
 42c:	65 9f       	mul	r22, r21
 42e:	30 0d       	add	r19, r0
 430:	11 24       	eor	r1, r1
 432:	27 56       	subi	r18, 0x67	; 103
 434:	3e 4f       	sbci	r19, 0xFE	; 254
 436:	68 9f       	mul	r22, r24
 438:	f0 01       	movw	r30, r0
 43a:	69 9f       	mul	r22, r25
 43c:	f0 0d       	add	r31, r0
 43e:	11 24       	eor	r1, r1
 440:	e7 56       	subi	r30, 0x67	; 103
 442:	fe 4f       	sbci	r31, 0xFE	; 254
 444:	35 83       	std	Z+5, r19	; 0x05
 446:	24 83       	std	Z+4, r18	; 0x04
 448:	ca 01       	movw	r24, r20
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	91 05       	cpc	r25, r1
 44e:	44 f3       	brlt	.-48     	; 0x420 <initialize+0x6>
 450:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <threads+0x14c>
 454:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <threads+0x14b>
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <initialized+0x1>
 460:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <initialized>
 464:	08 95       	ret

00000466 <enqueue>:
 466:	fb 01       	movw	r30, r22
 468:	20 81       	ld	r18, Z
 46a:	31 81       	ldd	r19, Z+1	; 0x01
 46c:	21 15       	cp	r18, r1
 46e:	31 05       	cpc	r19, r1
 470:	19 f4       	brne	.+6      	; 0x478 <enqueue+0x12>
 472:	91 83       	std	Z+1, r25	; 0x01
 474:	80 83       	st	Z, r24
 476:	08 95       	ret
 478:	fc 01       	movw	r30, r24
 47a:	35 83       	std	Z+5, r19	; 0x05
 47c:	24 83       	std	Z+4, r18	; 0x04
 47e:	fb 01       	movw	r30, r22
 480:	91 83       	std	Z+1, r25	; 0x01
 482:	80 83       	st	Z, r24
 484:	08 95       	ret

00000486 <dequeue>:
 486:	dc 01       	movw	r26, r24
 488:	ed 91       	ld	r30, X+
 48a:	fc 91       	ld	r31, X
 48c:	11 97       	sbiw	r26, 0x01	; 1
 48e:	30 97       	sbiw	r30, 0x00	; 0
 490:	09 f4       	brne	.+2      	; 0x494 <dequeue+0xe>
 492:	ff cf       	rjmp	.-2      	; 0x492 <dequeue+0xc>
 494:	24 81       	ldd	r18, Z+4	; 0x04
 496:	35 81       	ldd	r19, Z+5	; 0x05
 498:	2d 93       	st	X+, r18
 49a:	3c 93       	st	X, r19
 49c:	cf 01       	movw	r24, r30
 49e:	08 95       	ret

000004a0 <dispatch>:
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	00 d0       	rcall	.+0      	; 0x4a6 <dispatch+0x6>
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
 4aa:	9a 83       	std	Y+2, r25	; 0x02
 4ac:	89 83       	std	Y+1, r24	; 0x01
 4ae:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <current>
 4b2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <current+0x1>
 4b6:	06 96       	adiw	r24, 0x06	; 6
 4b8:	0e 94 54 03 	call	0x6a8	; 0x6a8 <setjmp>
 4bc:	89 2b       	or	r24, r25
 4be:	59 f4       	brne	.+22     	; 0x4d6 <dispatch+0x36>
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	9a 81       	ldd	r25, Y+2	; 0x02
 4c4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <current+0x1>
 4c8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <current>
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	06 96       	adiw	r24, 0x06	; 6
 4d2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <longjmp>
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <spawn>:
 4e0:	ef 92       	push	r14
 4e2:	ff 92       	push	r15
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	00 d0       	rcall	.+0      	; 0x4ee <spawn+0xe>
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	7c 01       	movw	r14, r24
 4f4:	8b 01       	movw	r16, r22
 4f6:	f8 94       	cli
 4f8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <initialized>
 4fc:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <initialized+0x1>
 500:	89 2b       	or	r24, r25
 502:	11 f4       	brne	.+4      	; 0x508 <__stack+0x9>
 504:	0e 94 0d 02 	call	0x41a	; 0x41a <initialize>
 508:	8e e1       	ldi	r24, 0x1E	; 30
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	0e 94 43 02 	call	0x486	; 0x486 <dequeue>
 510:	9a 83       	std	Y+2, r25	; 0x02
 512:	89 83       	std	Y+1, r24	; 0x01
 514:	fc 01       	movw	r30, r24
 516:	f1 82       	std	Z+1, r15	; 0x01
 518:	e0 82       	st	Z, r14
 51a:	13 83       	std	Z+3, r17	; 0x03
 51c:	02 83       	std	Z+2, r16	; 0x02
 51e:	15 82       	std	Z+5, r1	; 0x05
 520:	14 82       	std	Z+4, r1	; 0x04
 522:	06 96       	adiw	r24, 0x06	; 6
 524:	0e 94 54 03 	call	0x6a8	; 0x6a8 <setjmp>
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	e1 f4       	brne	.+56     	; 0x564 <__stack+0x65>
 52c:	78 94       	sei
 52e:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <current>
 532:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <current+0x1>
 536:	ed 91       	ld	r30, X+
 538:	fc 91       	ld	r31, X
 53a:	11 97       	sbiw	r26, 0x01	; 1
 53c:	12 96       	adiw	r26, 0x02	; 2
 53e:	8d 91       	ld	r24, X+
 540:	9c 91       	ld	r25, X
 542:	13 97       	sbiw	r26, 0x03	; 3
 544:	09 95       	icall
 546:	f8 94       	cli
 548:	6e e1       	ldi	r22, 0x1E	; 30
 54a:	71 e0       	ldi	r23, 0x01	; 1
 54c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <current>
 550:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <current+0x1>
 554:	0e 94 33 02 	call	0x466	; 0x466 <enqueue>
 558:	8a e2       	ldi	r24, 0x2A	; 42
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	0e 94 43 02 	call	0x486	; 0x486 <dequeue>
 560:	0e 94 50 02 	call	0x4a0	; 0x4a0 <dispatch>
 564:	e9 81       	ldd	r30, Y+1	; 0x01
 566:	fa 81       	ldd	r31, Y+2	; 0x02
 568:	36 96       	adiw	r30, 0x06	; 6
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	9a 81       	ldd	r25, Y+2	; 0x02
 56e:	87 59       	subi	r24, 0x97	; 151
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	91 8b       	std	Z+17, r25	; 0x11
 574:	80 8b       	std	Z+16, r24	; 0x10
 576:	e9 81       	ldd	r30, Y+1	; 0x01
 578:	fa 81       	ldd	r31, Y+2	; 0x02
 57a:	91 8f       	std	Z+25, r25	; 0x19
 57c:	80 8f       	std	Z+24, r24	; 0x18
 57e:	6a e2       	ldi	r22, 0x2A	; 42
 580:	71 e0       	ldi	r23, 0x01	; 1
 582:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <current>
 586:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <current+0x1>
 58a:	0e 94 33 02 	call	0x466	; 0x466 <enqueue>
 58e:	89 81       	ldd	r24, Y+1	; 0x01
 590:	9a 81       	ldd	r25, Y+2	; 0x02
 592:	0e 94 50 02 	call	0x4a0	; 0x4a0 <dispatch>
 596:	78 94       	sei
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	ff 90       	pop	r15
 5a6:	ef 90       	pop	r14
 5a8:	08 95       	ret

000005aa <lock>:

void lock(mutex *m) {
	DISABLE();
 5aa:	f8 94       	cli
	if(m->locked == 1){
 5ac:	fc 01       	movw	r30, r24
 5ae:	20 81       	ld	r18, Z
 5b0:	31 81       	ldd	r19, Z+1	; 0x01
 5b2:	21 30       	cpi	r18, 0x01	; 1
 5b4:	31 05       	cpc	r19, r1
 5b6:	81 f4       	brne	.+32     	; 0x5d8 <lock+0x2e>
			while (q->next){
				q = q->next;
			}
			q->next = current;
		}*/
		enqueue(current, &(m->waitQ));
 5b8:	bc 01       	movw	r22, r24
 5ba:	6e 5f       	subi	r22, 0xFE	; 254
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <current>
 5c2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <current+0x1>
 5c6:	0e 94 33 02 	call	0x466	; 0x466 <enqueue>
		dispatch(dequeue(&readyQ));
 5ca:	8a e2       	ldi	r24, 0x2A	; 42
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	0e 94 43 02 	call	0x486	; 0x486 <dequeue>
 5d2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <dispatch>
 5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <lock+0x38>
	}else {
		//enqueue(current, &readyQ);
		m->locked = 1;
 5d8:	21 e0       	ldi	r18, 0x01	; 1
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	fc 01       	movw	r30, r24
 5de:	31 83       	std	Z+1, r19	; 0x01
 5e0:	20 83       	st	Z, r18
	}
	ENABLE();
 5e2:	78 94       	sei
 5e4:	08 95       	ret

000005e6 <unlock>:
}

void unlock(mutex *m) {
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
	DISABLE();
 5ea:	f8 94       	cli
	if(m->waitQ == NULL){
 5ec:	fc 01       	movw	r30, r24
 5ee:	22 81       	ldd	r18, Z+2	; 0x02
 5f0:	33 81       	ldd	r19, Z+3	; 0x03
 5f2:	23 2b       	or	r18, r19
 5f4:	19 f4       	brne	.+6      	; 0x5fc <unlock+0x16>
		m->locked = 0;
 5f6:	11 82       	std	Z+1, r1	; 0x01
 5f8:	10 82       	st	Z, r1
 5fa:	11 c0       	rjmp	.+34     	; 0x61e <unlock+0x38>
 5fc:	ec 01       	movw	r28, r24
	}else{
		/*thread p = *m->waitQ;
		*m->waitQ = *m->waitQ->next;
		dispatch(p);*/
		enqueue(current, readyQ);
 5fe:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <readyQ>
 602:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <readyQ+0x1>
 606:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <current>
 60a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <current+0x1>
 60e:	0e 94 33 02 	call	0x466	; 0x466 <enqueue>
		dispatch(dequeue(&(m->waitQ)));
 612:	ce 01       	movw	r24, r28
 614:	02 96       	adiw	r24, 0x02	; 2
 616:	0e 94 43 02 	call	0x486	; 0x486 <dequeue>
 61a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <dispatch>
	}
	ENABLE();
 61e:	78 94       	sei
}
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <__divmodsi4>:
 626:	05 2e       	mov	r0, r21
 628:	97 fb       	bst	r25, 7
 62a:	1e f4       	brtc	.+6      	; 0x632 <__divmodsi4+0xc>
 62c:	00 94       	com	r0
 62e:	0e 94 2a 03 	call	0x654	; 0x654 <__negsi2>
 632:	57 fd       	sbrc	r21, 7
 634:	07 d0       	rcall	.+14     	; 0x644 <__divmodsi4_neg2>
 636:	0e 94 32 03 	call	0x664	; 0x664 <__udivmodsi4>
 63a:	07 fc       	sbrc	r0, 7
 63c:	03 d0       	rcall	.+6      	; 0x644 <__divmodsi4_neg2>
 63e:	4e f4       	brtc	.+18     	; 0x652 <__divmodsi4_exit>
 640:	0c 94 2a 03 	jmp	0x654	; 0x654 <__negsi2>

00000644 <__divmodsi4_neg2>:
 644:	50 95       	com	r21
 646:	40 95       	com	r20
 648:	30 95       	com	r19
 64a:	21 95       	neg	r18
 64c:	3f 4f       	sbci	r19, 0xFF	; 255
 64e:	4f 4f       	sbci	r20, 0xFF	; 255
 650:	5f 4f       	sbci	r21, 0xFF	; 255

00000652 <__divmodsi4_exit>:
 652:	08 95       	ret

00000654 <__negsi2>:
 654:	90 95       	com	r25
 656:	80 95       	com	r24
 658:	70 95       	com	r23
 65a:	61 95       	neg	r22
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	08 95       	ret

00000664 <__udivmodsi4>:
 664:	a1 e2       	ldi	r26, 0x21	; 33
 666:	1a 2e       	mov	r1, r26
 668:	aa 1b       	sub	r26, r26
 66a:	bb 1b       	sub	r27, r27
 66c:	fd 01       	movw	r30, r26
 66e:	0d c0       	rjmp	.+26     	; 0x68a <__udivmodsi4_ep>

00000670 <__udivmodsi4_loop>:
 670:	aa 1f       	adc	r26, r26
 672:	bb 1f       	adc	r27, r27
 674:	ee 1f       	adc	r30, r30
 676:	ff 1f       	adc	r31, r31
 678:	a2 17       	cp	r26, r18
 67a:	b3 07       	cpc	r27, r19
 67c:	e4 07       	cpc	r30, r20
 67e:	f5 07       	cpc	r31, r21
 680:	20 f0       	brcs	.+8      	; 0x68a <__udivmodsi4_ep>
 682:	a2 1b       	sub	r26, r18
 684:	b3 0b       	sbc	r27, r19
 686:	e4 0b       	sbc	r30, r20
 688:	f5 0b       	sbc	r31, r21

0000068a <__udivmodsi4_ep>:
 68a:	66 1f       	adc	r22, r22
 68c:	77 1f       	adc	r23, r23
 68e:	88 1f       	adc	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	1a 94       	dec	r1
 694:	69 f7       	brne	.-38     	; 0x670 <__udivmodsi4_loop>
 696:	60 95       	com	r22
 698:	70 95       	com	r23
 69a:	80 95       	com	r24
 69c:	90 95       	com	r25
 69e:	9b 01       	movw	r18, r22
 6a0:	ac 01       	movw	r20, r24
 6a2:	bd 01       	movw	r22, r26
 6a4:	cf 01       	movw	r24, r30
 6a6:	08 95       	ret

000006a8 <setjmp>:
 6a8:	dc 01       	movw	r26, r24
 6aa:	2d 92       	st	X+, r2
 6ac:	3d 92       	st	X+, r3
 6ae:	4d 92       	st	X+, r4
 6b0:	5d 92       	st	X+, r5
 6b2:	6d 92       	st	X+, r6
 6b4:	7d 92       	st	X+, r7
 6b6:	8d 92       	st	X+, r8
 6b8:	9d 92       	st	X+, r9
 6ba:	ad 92       	st	X+, r10
 6bc:	bd 92       	st	X+, r11
 6be:	cd 92       	st	X+, r12
 6c0:	dd 92       	st	X+, r13
 6c2:	ed 92       	st	X+, r14
 6c4:	fd 92       	st	X+, r15
 6c6:	0d 93       	st	X+, r16
 6c8:	1d 93       	st	X+, r17
 6ca:	cd 93       	st	X+, r28
 6cc:	dd 93       	st	X+, r29
 6ce:	ff 91       	pop	r31
 6d0:	ef 91       	pop	r30
 6d2:	8d b7       	in	r24, 0x3d	; 61
 6d4:	8d 93       	st	X+, r24
 6d6:	8e b7       	in	r24, 0x3e	; 62
 6d8:	8d 93       	st	X+, r24
 6da:	8f b7       	in	r24, 0x3f	; 63
 6dc:	8d 93       	st	X+, r24
 6de:	ed 93       	st	X+, r30
 6e0:	fd 93       	st	X+, r31
 6e2:	88 27       	eor	r24, r24
 6e4:	99 27       	eor	r25, r25
 6e6:	09 94       	ijmp

000006e8 <longjmp>:
 6e8:	dc 01       	movw	r26, r24
 6ea:	cb 01       	movw	r24, r22
 6ec:	81 30       	cpi	r24, 0x01	; 1
 6ee:	91 05       	cpc	r25, r1
 6f0:	81 1d       	adc	r24, r1
 6f2:	2d 90       	ld	r2, X+
 6f4:	3d 90       	ld	r3, X+
 6f6:	4d 90       	ld	r4, X+
 6f8:	5d 90       	ld	r5, X+
 6fa:	6d 90       	ld	r6, X+
 6fc:	7d 90       	ld	r7, X+
 6fe:	8d 90       	ld	r8, X+
 700:	9d 90       	ld	r9, X+
 702:	ad 90       	ld	r10, X+
 704:	bd 90       	ld	r11, X+
 706:	cd 90       	ld	r12, X+
 708:	dd 90       	ld	r13, X+
 70a:	ed 90       	ld	r14, X+
 70c:	fd 90       	ld	r15, X+
 70e:	0d 91       	ld	r16, X+
 710:	1d 91       	ld	r17, X+
 712:	cd 91       	ld	r28, X+
 714:	dd 91       	ld	r29, X+
 716:	ed 91       	ld	r30, X+
 718:	fd 91       	ld	r31, X+
 71a:	0d 90       	ld	r0, X+
 71c:	f8 94       	cli
 71e:	fe bf       	out	0x3e, r31	; 62
 720:	0f be       	out	0x3f, r0	; 63
 722:	ed bf       	out	0x3d, r30	; 61
 724:	ed 91       	ld	r30, X+
 726:	fd 91       	ld	r31, X+
 728:	09 94       	ijmp

0000072a <_exit>:
 72a:	f8 94       	cli

0000072c <__stop_program>:
 72c:	ff cf       	rjmp	.-2      	; 0x72c <__stop_program>
