
Labb 3 fast 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000738  000007cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000738  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022d  00800120  00800120  000007ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ff  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2c  00000000  00000000  00001c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077b  00000000  00000000  0000274f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00002ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ae  00000000  00000000  00003190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a3a  00000000  00000000  0000373e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 e3       	ldi	r30, 0x38	; 56
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 32       	cpi	r26, 0x20	; 32
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a0 e2       	ldi	r26, 0x20	; 32
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ad 34       	cpi	r26, 0x4D	; 77
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  92:	0c 94 9a 03 	jmp	0x734	; 0x734 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_init>:
		writeChar(ch, cntr); // skriv siffran till höger
		y = y/10; // vi tar bort siffran längst till höger
		cntr--; // vi börjar till höger och går sedan åt vänster därifrån
	}
	
}
  9a:	e4 ee       	ldi	r30, 0xE4	; 228
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	80 83       	st	Z, r24
  a4:	87 eb       	ldi	r24, 0xB7	; 183
  a6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
  aa:	e7 ee       	ldi	r30, 0xE7	; 231
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8f 60       	ori	r24, 0x0F	; 15
  b2:	80 83       	st	Z, r24
  b4:	87 e0       	ldi	r24, 0x07	; 7
  b6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
  ba:	08 95       	ret

000000bc <writeChar>:
  bc:	66 30       	cpi	r22, 0x06	; 6
  be:	71 05       	cpc	r23, r1
  c0:	b8 f5       	brcc	.+110    	; 0x130 <writeChar+0x74>
  c2:	8a 30       	cpi	r24, 0x0A	; 10
  c4:	48 f4       	brcc	.+18     	; 0xd8 <writeChar+0x1c>
  c6:	e8 2f       	mov	r30, r24
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	ee 0f       	add	r30, r30
  cc:	ff 1f       	adc	r31, r31
  ce:	e0 50       	subi	r30, 0x00	; 0
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	40 81       	ld	r20, Z
  d4:	51 81       	ldd	r21, Z+1	; 0x01
  d6:	02 c0       	rjmp	.+4      	; 0xdc <writeChar+0x20>
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	60 ff       	sbrs	r22, 0
  de:	03 c0       	rjmp	.+6      	; 0xe6 <writeChar+0x2a>
  e0:	af e0       	ldi	r26, 0x0F	; 15
  e2:	b4 e0       	ldi	r27, 0x04	; 4
  e4:	02 c0       	rjmp	.+4      	; 0xea <writeChar+0x2e>
  e6:	a0 ef       	ldi	r26, 0xF0	; 240
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	75 95       	asr	r23
  ec:	67 95       	ror	r22
  ee:	fb 01       	movw	r30, r22
  f0:	e4 51       	subi	r30, 0x14	; 20
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	18 c0       	rjmp	.+48     	; 0x12a <writeChar+0x6e>
  fa:	84 2f       	mov	r24, r20
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0b 2e       	mov	r0, r27
 102:	02 c0       	rjmp	.+4      	; 0x108 <writeChar+0x4c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <writeChar+0x48>
 10c:	90 81       	ld	r25, Z
 10e:	9a 23       	and	r25, r26
 110:	89 2b       	or	r24, r25
 112:	80 83       	st	Z, r24
 114:	55 95       	asr	r21
 116:	47 95       	ror	r20
 118:	55 95       	asr	r21
 11a:	47 95       	ror	r20
 11c:	55 95       	asr	r21
 11e:	47 95       	ror	r20
 120:	55 95       	asr	r21
 122:	47 95       	ror	r20
 124:	35 96       	adiw	r30, 0x05	; 5
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	24 30       	cpi	r18, 0x04	; 4
 12c:	31 05       	cpc	r19, r1
 12e:	2c f3       	brlt	.-54     	; 0xfa <writeChar+0x3e>
 130:	08 95       	ret

00000132 <printAt>:

void printAt(long num, int pos) {
 132:	8f 92       	push	r8
 134:	9f 92       	push	r9
 136:	af 92       	push	r10
 138:	bf 92       	push	r11
 13a:	cf 92       	push	r12
 13c:	df 92       	push	r13
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	4b 01       	movw	r8, r22
 148:	5c 01       	movw	r10, r24
 14a:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( ((num % 100) / 10), pp);
 14c:	24 e6       	ldi	r18, 0x64	; 100
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	0e 94 18 03 	call	0x630	; 0x630 <__divmodsi4>
 158:	0f 2e       	mov	r0, r31
 15a:	fa e0       	ldi	r31, 0x0A	; 10
 15c:	cf 2e       	mov	r12, r31
 15e:	d1 2c       	mov	r13, r1
 160:	e1 2c       	mov	r14, r1
 162:	f1 2c       	mov	r15, r1
 164:	f0 2d       	mov	r31, r0
 166:	a7 01       	movw	r20, r14
 168:	96 01       	movw	r18, r12
 16a:	0e 94 18 03 	call	0x630	; 0x630 <__divmodsi4>
 16e:	82 2f       	mov	r24, r18
 170:	be 01       	movw	r22, r28
 172:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
	pp++;
 176:	21 96       	adiw	r28, 0x01	; 1
	writeChar( (num % 10), pp);
 178:	c5 01       	movw	r24, r10
 17a:	b4 01       	movw	r22, r8
 17c:	a7 01       	movw	r20, r14
 17e:	96 01       	movw	r18, r12
 180:	0e 94 18 03 	call	0x630	; 0x630 <__divmodsi4>
 184:	86 2f       	mov	r24, r22
 186:	be 01       	movw	r22, r28
 188:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	bf 90       	pop	r11
 19a:	af 90       	pop	r10
 19c:	9f 90       	pop	r9
 19e:	8f 90       	pop	r8
 1a0:	08 95       	ret

000001a2 <blink>:
		}
	}
}

void blink(void){
	int light = 0; // light bestämmer om lampan är av eller på
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
	int loopPrevent = 1;
	
	while(1){
		lock(&m1);
 1a6:	86 e2       	ldi	r24, 0x26	; 38
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lock>
		if(timekeeper){
 1ae:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <timekeeper>
 1b2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <timekeeper+0x1>
 1b6:	89 2b       	or	r24, r25
 1b8:	a1 f0       	breq	.+40     	; 0x1e2 <blink+0x40>
			if(light){
 1ba:	20 97       	sbiw	r28, 0x00	; 0
 1bc:	41 f0       	breq	.+16     	; 0x1ce <blink+0x2c>
				printAt(0, 2); // om den ?r p? sl?r vi av den
 1be:	42 e0       	ldi	r20, 0x02	; 2
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	cb 01       	movw	r24, r22
 1c8:	0e 94 99 00 	call	0x132	; 0x132 <printAt>
 1cc:	08 c0       	rjmp	.+16     	; 0x1de <blink+0x3c>
				}else{
				printAt(69, 2); // annars sl?r vi p? den
 1ce:	42 e0       	ldi	r20, 0x02	; 2
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	65 e4       	ldi	r22, 0x45	; 69
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 99 00 	call	0x132	; 0x132 <printAt>
			}
			light = ~light; // vi ?ndrar light f?r att indikera att lampan ?r av/p?
 1de:	c0 95       	com	r28
 1e0:	d0 95       	com	r29
		}
		timekeeper = 0;
 1e2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <timekeeper+0x1>
 1e6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <timekeeper>
	}
 1ea:	dd cf       	rjmp	.-70     	; 0x1a6 <blink+0x4>

000001ec <button>:

void button(void)
{
	int buttonpress = 0;
	int lastvalue = 0;
	printAt(80, 4);
 1ec:	44 e0       	ldi	r20, 0x04	; 4
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	60 e5       	ldi	r22, 0x50	; 80
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 99 00 	call	0x132	; 0x132 <printAt>
}

void button(void)
{
	int buttonpress = 0;
	int lastvalue = 0;
 1fc:	00 e0       	ldi	r16, 0x00	; 0
 1fe:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void button(void)
{
	int buttonpress = 0;
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d0 e0       	ldi	r29, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
			}
			lastvalue = ~lastvalue;
		}
		if((PINB&0x80) && buttonpress == 1) // om den inte är nedtryckt blir buttonpress noll
		{
			buttonpress = 0;
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	d0 e0       	ldi	r29, 0x00	; 0
	int buttonpress = 0;
	int lastvalue = 0;
	printAt(80, 4);
	while(1)
	{
		lock(&m2);
 20a:	82 e2       	ldi	r24, 0x22	; 34
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lock>
		if (!(PINB&0x80) && buttonpress == 0) // PINB7 = 0, när den är intryckt
 212:	1f 99       	sbic	0x03, 7	; 3
 214:	1a c0       	rjmp	.+52     	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
 216:	20 97       	sbiw	r28, 0x00	; 0
 218:	c1 f4       	brne	.+48     	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
		{									  // vi byter läge endast då knappen är nedtryckt och den nyss inte var det
			buttonpress = 1;
			if (lastvalue) // vi ser om det ena läget är på
 21a:	01 15       	cp	r16, r1
 21c:	11 05       	cpc	r17, r1
 21e:	49 f0       	breq	.+18     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
			{
				printAt(80, 4);
 220:	44 e0       	ldi	r20, 0x04	; 4
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	60 e5       	ldi	r22, 0x50	; 80
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 99 00 	call	0x132	; 0x132 <printAt>
 230:	08 c0       	rjmp	.+16     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
			}
			else // annars är det ju det andra läget
			{
				printAt(8, 4);
 232:	44 e0       	ldi	r20, 0x04	; 4
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	68 e0       	ldi	r22, 0x08	; 8
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 99 00 	call	0x132	; 0x132 <printAt>
			}
			lastvalue = ~lastvalue;
 242:	00 95       	com	r16
 244:	10 95       	com	r17
	while(1)
	{
		lock(&m2);
		if (!(PINB&0x80) && buttonpress == 0) // PINB7 = 0, när den är intryckt
		{									  // vi byter läge endast då knappen är nedtryckt och den nyss inte var det
			buttonpress = 1;
 246:	c1 e0       	ldi	r28, 0x01	; 1
 248:	d0 e0       	ldi	r29, 0x00	; 0
			{
				printAt(8, 4);
			}
			lastvalue = ~lastvalue;
		}
		if((PINB&0x80) && buttonpress == 1) // om den inte är nedtryckt blir buttonpress noll
 24a:	1f 9b       	sbis	0x03, 7	; 3
 24c:	de cf       	rjmp	.-68     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 24e:	c1 30       	cpi	r28, 0x01	; 1
 250:	d1 05       	cpc	r29, r1
 252:	d9 f6       	brne	.-74     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 254:	d8 cf       	rjmp	.-80     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>

00000256 <is_prime>:
	writeChar( ((num % 100) / 10), pp);
	pp++;
	writeChar( (num % 10), pp);
}

int is_prime(long i){
 256:	cf 92       	push	r12
 258:	df 92       	push	r13
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	6b 01       	movw	r12, r22
 264:	7c 01       	movw	r14, r24
	for(int x = 2; x < i; x++){
 266:	c2 e0       	ldi	r28, 0x02	; 2
 268:	d0 e0       	ldi	r29, 0x00	; 0
 26a:	09 c0       	rjmp	.+18     	; 0x27e <is_prime+0x28>
		if(i%x == 0){
 26c:	c7 01       	movw	r24, r14
 26e:	b6 01       	movw	r22, r12
 270:	0e 94 18 03 	call	0x630	; 0x630 <__divmodsi4>
 274:	67 2b       	or	r22, r23
 276:	68 2b       	or	r22, r24
 278:	69 2b       	or	r22, r25
 27a:	71 f0       	breq	.+28     	; 0x298 <is_prime+0x42>
	pp++;
	writeChar( (num % 10), pp);
}

int is_prime(long i){
	for(int x = 2; x < i; x++){
 27c:	21 96       	adiw	r28, 0x01	; 1
 27e:	9e 01       	movw	r18, r28
 280:	0d 2e       	mov	r0, r29
 282:	00 0c       	add	r0, r0
 284:	44 0b       	sbc	r20, r20
 286:	55 0b       	sbc	r21, r21
 288:	2c 15       	cp	r18, r12
 28a:	3d 05       	cpc	r19, r13
 28c:	4e 05       	cpc	r20, r14
 28e:	5f 05       	cpc	r21, r15
 290:	6c f3       	brlt	.-38     	; 0x26c <is_prime+0x16>
		if(i%x == 0){
			return 0;
		}
	}
	return 1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <is_prime+0x46>
}

int is_prime(long i){
	for(int x = 2; x < i; x++){
		if(i%x == 0){
			return 0;
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 1;
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	08 95       	ret

000002aa <primes>:

void primes(int i){
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	8c 01       	movw	r16, r24
	for(int x = 2; x < i; x++){
 2bc:	c2 e0       	ldi	r28, 0x02	; 2
 2be:	d0 e0       	ldi	r29, 0x00	; 0
 2c0:	12 c0       	rjmp	.+36     	; 0x2e6 <primes+0x3c>
		if(is_prime(x)){
 2c2:	6e 01       	movw	r12, r28
 2c4:	0d 2e       	mov	r0, r29
 2c6:	00 0c       	add	r0, r0
 2c8:	ee 08       	sbc	r14, r14
 2ca:	ff 08       	sbc	r15, r15
 2cc:	c7 01       	movw	r24, r14
 2ce:	b6 01       	movw	r22, r12
 2d0:	0e 94 2b 01 	call	0x256	; 0x256 <is_prime>
 2d4:	89 2b       	or	r24, r25
 2d6:	31 f0       	breq	.+12     	; 0x2e4 <primes+0x3a>
			printAt(x, 0);
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	c7 01       	movw	r24, r14
 2de:	b6 01       	movw	r22, r12
 2e0:	0e 94 99 00 	call	0x132	; 0x132 <printAt>
	}
	return 1;
}

void primes(int i){
	for(int x = 2; x < i; x++){
 2e4:	21 96       	adiw	r28, 0x01	; 1
 2e6:	c0 17       	cp	r28, r16
 2e8:	d1 07       	cpc	r29, r17
 2ea:	5c f3       	brlt	.-42     	; 0x2c2 <primes+0x18>
		if(is_prime(x)){
			printAt(x, 0);
		}
	}
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	08 95       	ret

000002fe <main>:
}

int main(void)
{
	/* Replace with your application code */
	CLKPR = 0x80;
 2fe:	e1 e6       	ldi	r30, 0x61	; 97
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 e8       	ldi	r24, 0x80	; 128
 304:	80 83       	st	Z, r24
	CLKPR = 0x00;
 306:	10 82       	st	Z, r1
	LCD_init();
 308:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_init>
	
	spawn(button, 3);
 30c:	63 e0       	ldi	r22, 0x03	; 3
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	86 ef       	ldi	r24, 0xF6	; 246
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 3f 02 	call	0x47e	; 0x47e <spawn>
	spawn(blink, 2);
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	81 ed       	ldi	r24, 0xD1	; 209
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 3f 02 	call	0x47e	; 0x47e <spawn>
	primes(10000);
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	97 e2       	ldi	r25, 0x27	; 39
 328:	0e 94 55 01 	call	0x2aa	; 0x2aa <primes>
 32c:	ff cf       	rjmp	.-2      	; 0x32c <main+0x2e>

0000032e <enqueue>:

void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
 32e:	fc 01       	movw	r30, r24
 330:	15 82       	std	Z+5, r1	; 0x05
 332:	14 82       	std	Z+4, r1	; 0x04
 334:	fb 01       	movw	r30, r22
 336:	20 81       	ld	r18, Z
 338:	31 81       	ldd	r19, Z+1	; 0x01
 33a:	21 15       	cp	r18, r1
 33c:	31 05       	cpc	r19, r1
 33e:	19 f4       	brne	.+6      	; 0x346 <enqueue+0x18>
 340:	91 83       	std	Z+1, r25	; 0x01
 342:	80 83       	st	Z, r24
 344:	08 95       	ret
 346:	fc 01       	movw	r30, r24
 348:	35 83       	std	Z+5, r19	; 0x05
 34a:	24 83       	std	Z+4, r18	; 0x04
 34c:	fb 01       	movw	r30, r22
 34e:	91 83       	std	Z+1, r25	; 0x01
 350:	80 83       	st	Z, r24
 352:	08 95       	ret

00000354 <dequeue>:
 354:	dc 01       	movw	r26, r24
 356:	ed 91       	ld	r30, X+
 358:	fc 91       	ld	r31, X
 35a:	11 97       	sbiw	r26, 0x01	; 1
 35c:	30 97       	sbiw	r30, 0x00	; 0
 35e:	09 f4       	brne	.+2      	; 0x362 <dequeue+0xe>
 360:	ff cf       	rjmp	.-2      	; 0x360 <dequeue+0xc>
 362:	24 81       	ldd	r18, Z+4	; 0x04
 364:	35 81       	ldd	r19, Z+5	; 0x05
 366:	2d 93       	st	X+, r18
 368:	3c 93       	st	X, r19
 36a:	cf 01       	movw	r24, r30
 36c:	08 95       	ret

0000036e <dispatch>:
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	00 d0       	rcall	.+0      	; 0x374 <dispatch+0x6>
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
 378:	9a 83       	std	Y+2, r25	; 0x02
 37a:	89 83       	std	Y+1, r24	; 0x01
 37c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <current>
 380:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <current+0x1>
 384:	06 96       	adiw	r24, 0x06	; 6
 386:	0e 94 59 03 	call	0x6b2	; 0x6b2 <setjmp>
 38a:	89 2b       	or	r24, r25
 38c:	59 f4       	brne	.+22     	; 0x3a4 <dispatch+0x36>
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	9a 81       	ldd	r25, Y+2	; 0x02
 392:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <current+0x1>
 396:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <current>
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	06 96       	adiw	r24, 0x06	; 6
 3a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <longjmp>
 3a4:	0f 90       	pop	r0
 3a6:	0f 90       	pop	r0
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <lock>:
}

void lock(mutex *m) {
	DISABLE();
 3ae:	f8 94       	cli
	if(m->locked){
 3b0:	fc 01       	movw	r30, r24
 3b2:	20 81       	ld	r18, Z
 3b4:	31 81       	ldd	r19, Z+1	; 0x01
 3b6:	23 2b       	or	r18, r19
 3b8:	81 f0       	breq	.+32     	; 0x3da <lock+0x2c>
			while (q->next){
				q = q->next;
			}
			q->next = current;
		}*/
		enqueue(current, &(m->waitQ));
 3ba:	bc 01       	movw	r22, r24
 3bc:	6e 5f       	subi	r22, 0xFE	; 254
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <current>
 3c4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <current+0x1>
 3c8:	0e 94 97 01 	call	0x32e	; 0x32e <enqueue>
		dispatch(dequeue(&readyQ));
 3cc:	8a e2       	ldi	r24, 0x2A	; 42
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	0e 94 aa 01 	call	0x354	; 0x354 <dequeue>
 3d4:	0e 94 b7 01 	call	0x36e	; 0x36e <dispatch>
 3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <lock+0x36>
	}else {
		m->locked = 1;
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	fc 01       	movw	r30, r24
 3e0:	31 83       	std	Z+1, r19	; 0x01
 3e2:	20 83       	st	Z, r18
	}
	ENABLE();
 3e4:	78 94       	sei
 3e6:	08 95       	ret

000003e8 <initialize>:
int timekeeper = 1;
int initialized = 0;

static void initialize(void) {
	int i;
	for (i=0; i<NTHREADS-1; i++)
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	15 c0       	rjmp	.+42     	; 0x418 <__DATA_REGION_LENGTH__+0x18>
	threads[i].next = &threads[i+1];
 3ee:	ac 01       	movw	r20, r24
 3f0:	4f 5f       	subi	r20, 0xFF	; 255
 3f2:	5f 4f       	sbci	r21, 0xFF	; 255
 3f4:	6d e6       	ldi	r22, 0x6D	; 109
 3f6:	64 9f       	mul	r22, r20
 3f8:	90 01       	movw	r18, r0
 3fa:	65 9f       	mul	r22, r21
 3fc:	30 0d       	add	r19, r0
 3fe:	11 24       	eor	r1, r1
 400:	27 56       	subi	r18, 0x67	; 103
 402:	3e 4f       	sbci	r19, 0xFE	; 254
 404:	68 9f       	mul	r22, r24
 406:	f0 01       	movw	r30, r0
 408:	69 9f       	mul	r22, r25
 40a:	f0 0d       	add	r31, r0
 40c:	11 24       	eor	r1, r1
 40e:	e7 56       	subi	r30, 0x67	; 103
 410:	fe 4f       	sbci	r31, 0xFE	; 254
 412:	35 83       	std	Z+5, r19	; 0x05
 414:	24 83       	std	Z+4, r18	; 0x04
int timekeeper = 1;
int initialized = 0;

static void initialize(void) {
	int i;
	for (i=0; i<NTHREADS-1; i++)
 416:	ca 01       	movw	r24, r20
 418:	83 30       	cpi	r24, 0x03	; 3
 41a:	91 05       	cpc	r25, r1
 41c:	44 f3       	brlt	.-48     	; 0x3ee <initialize+0x6>
	threads[i].next = &threads[i+1];
	threads[NTHREADS-1].next = NULL;
 41e:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <threads+0x14c>
 422:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <threads+0x14b>
	PORTB = (1<<PB7);
 426:	80 e8       	ldi	r24, 0x80	; 128
 428:	85 b9       	out	0x05, r24	; 5
	EIMSK = 0x80;
 42a:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 = 0x80;
 42c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	TCCR1A = 0xC0;
 430:	a0 e8       	ldi	r26, 0x80	; 128
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	80 ec       	ldi	r24, 0xC0	; 192
 436:	8c 93       	st	X, r24
	TCCR1B = 0x18;
 438:	e1 e8       	ldi	r30, 0x81	; 129
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	98 e1       	ldi	r25, 0x18	; 24
 43e:	90 83       	st	Z, r25
	
	//OC1A is set high on compare match.
	TCCR1A = (1 << COM1A0) | (1 << COM1A1);
 440:	8c 93       	st	X, r24
	
	// Set timer to CTC and prescale Factor on 1024.
	TCCR1B = (1 << WGM12) | (1 << CS10) |(1 << CS12);
 442:	8d e0       	ldi	r24, 0x0D	; 13
 444:	80 83       	st	Z, r24
	
	// Set Value to around 50ms. 8000000/20480 = 390.625
	OCR1A = 3906;
 446:	82 e4       	ldi	r24, 0x42	; 66
 448:	9f e0       	ldi	r25, 0x0F	; 15
 44a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 44e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	
	//clearing the TCNT1 register during initialization.
	TCNT1 = 0x0;
 452:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 456:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	//Compare a match interrupt Enable.
	TIMSK1 = (1 << OCIE1A);
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
	
	lock(&m1);
 460:	86 e2       	ldi	r24, 0x26	; 38
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lock>
	lock(&m2);
 468:	82 e2       	ldi	r24, 0x22	; 34
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lock>
	
	initialized = 1;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 478:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 47c:	08 95       	ret

0000047e <spawn>:
		current = next;
		longjmp(next->context,1);
	}
}

void spawn(void (* function)(int), int arg) {
 47e:	ef 92       	push	r14
 480:	ff 92       	push	r15
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	00 d0       	rcall	.+0      	; 0x48c <spawn+0xe>
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
 490:	7c 01       	movw	r14, r24
 492:	8b 01       	movw	r16, r22
	thread newp;

	DISABLE();
 494:	f8 94       	cli
	if (!initialized) initialize();
 496:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 49a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 49e:	89 2b       	or	r24, r25
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <spawn+0x28>
 4a2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <initialize>

	newp = dequeue(&freeQ);
 4a6:	8e e1       	ldi	r24, 0x1E	; 30
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	0e 94 aa 01 	call	0x354	; 0x354 <dequeue>
 4ae:	9a 83       	std	Y+2, r25	; 0x02
 4b0:	89 83       	std	Y+1, r24	; 0x01
	newp->function = function;
 4b2:	fc 01       	movw	r30, r24
 4b4:	f1 82       	std	Z+1, r15	; 0x01
 4b6:	e0 82       	st	Z, r14
	newp->arg = arg;
 4b8:	13 83       	std	Z+3, r17	; 0x03
 4ba:	02 83       	std	Z+2, r16	; 0x02
	newp->next = NULL;
 4bc:	15 82       	std	Z+5, r1	; 0x05
 4be:	14 82       	std	Z+4, r1	; 0x04
	if (setjmp(newp->context) == 1) {
 4c0:	06 96       	adiw	r24, 0x06	; 6
 4c2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <setjmp>
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	e1 f4       	brne	.+56     	; 0x502 <__stack+0x3>
		ENABLE();
 4ca:	78 94       	sei
		current->function(current->arg);
 4cc:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <current>
 4d0:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <current+0x1>
 4d4:	ed 91       	ld	r30, X+
 4d6:	fc 91       	ld	r31, X
 4d8:	11 97       	sbiw	r26, 0x01	; 1
 4da:	12 96       	adiw	r26, 0x02	; 2
 4dc:	8d 91       	ld	r24, X+
 4de:	9c 91       	ld	r25, X
 4e0:	13 97       	sbiw	r26, 0x03	; 3
 4e2:	09 95       	icall
		DISABLE();
 4e4:	f8 94       	cli
		enqueue(current, &freeQ);
 4e6:	6e e1       	ldi	r22, 0x1E	; 30
 4e8:	71 e0       	ldi	r23, 0x01	; 1
 4ea:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <current>
 4ee:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <current+0x1>
 4f2:	0e 94 97 01 	call	0x32e	; 0x32e <enqueue>
		dispatch(dequeue(&readyQ));
 4f6:	8a e2       	ldi	r24, 0x2A	; 42
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 aa 01 	call	0x354	; 0x354 <dequeue>
 4fe:	0e 94 b7 01 	call	0x36e	; 0x36e <dispatch>
	}
	SETSTACK(&newp->context, &newp->stack);
 502:	e9 81       	ldd	r30, Y+1	; 0x01
 504:	fa 81       	ldd	r31, Y+2	; 0x02
 506:	36 96       	adiw	r30, 0x06	; 6
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	9a 81       	ldd	r25, Y+2	; 0x02
 50c:	87 59       	subi	r24, 0x97	; 151
 50e:	9f 4f       	sbci	r25, 0xFF	; 255
 510:	91 8b       	std	Z+17, r25	; 0x11
 512:	80 8b       	std	Z+16, r24	; 0x10
 514:	e9 81       	ldd	r30, Y+1	; 0x01
 516:	fa 81       	ldd	r31, Y+2	; 0x02
 518:	91 8f       	std	Z+25, r25	; 0x19
 51a:	80 8f       	std	Z+24, r24	; 0x18

	enqueue(current, &readyQ);
 51c:	6a e2       	ldi	r22, 0x2A	; 42
 51e:	71 e0       	ldi	r23, 0x01	; 1
 520:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <current>
 524:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <current+0x1>
 528:	0e 94 97 01 	call	0x32e	; 0x32e <enqueue>
	dispatch(newp);
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	9a 81       	ldd	r25, Y+2	; 0x02
 530:	0e 94 b7 01 	call	0x36e	; 0x36e <dispatch>
	ENABLE();
 534:	78 94       	sei
}
 536:	0f 90       	pop	r0
 538:	0f 90       	pop	r0
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	ff 90       	pop	r15
 544:	ef 90       	pop	r14
 546:	08 95       	ret

00000548 <unlock>:
		m->locked = 1;
	}
	ENABLE();
}

void unlock(mutex *m) {
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
	DISABLE();
 54c:	f8 94       	cli
	if(m->waitQ == NULL){
 54e:	fc 01       	movw	r30, r24
 550:	22 81       	ldd	r18, Z+2	; 0x02
 552:	33 81       	ldd	r19, Z+3	; 0x03
 554:	23 2b       	or	r18, r19
 556:	19 f4       	brne	.+6      	; 0x55e <unlock+0x16>
		m->locked = 0;
 558:	11 82       	std	Z+1, r1	; 0x01
 55a:	10 82       	st	Z, r1
 55c:	11 c0       	rjmp	.+34     	; 0x580 <unlock+0x38>
 55e:	ec 01       	movw	r28, r24
	}else{
		/*thread p = *m->waitQ;
		*m->waitQ = *m->waitQ->next;
		dispatch(p);*/
		enqueue(current, readyQ);
 560:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <readyQ>
 564:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <readyQ+0x1>
 568:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <current>
 56c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <current+0x1>
 570:	0e 94 97 01 	call	0x32e	; 0x32e <enqueue>
		dispatch(dequeue(&(m->waitQ)));
 574:	ce 01       	movw	r24, r28
 576:	02 96       	adiw	r24, 0x02	; 2
 578:	0e 94 aa 01 	call	0x354	; 0x354 <dequeue>
 57c:	0e 94 b7 01 	call	0x36e	; 0x36e <dispatch>
	}
	ENABLE();
 580:	78 94       	sei
}
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	08 95       	ret

00000588 <__vector_3>:

//om interrupt på pinb7 yielda
ISR(PCINT1_vect)
{
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	2f 93       	push	r18
 594:	3f 93       	push	r19
 596:	4f 93       	push	r20
 598:	5f 93       	push	r21
 59a:	6f 93       	push	r22
 59c:	7f 93       	push	r23
 59e:	8f 93       	push	r24
 5a0:	9f 93       	push	r25
 5a2:	af 93       	push	r26
 5a4:	bf 93       	push	r27
 5a6:	ef 93       	push	r30
 5a8:	ff 93       	push	r31
	if ((PINB >> 7) == 1)
 5aa:	1f 9b       	sbis	0x03, 7	; 3
 5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <__vector_3+0x2e>
	{
		unlock(&m2);
 5ae:	82 e2       	ldi	r24, 0x22	; 34
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	0e 94 a4 02 	call	0x548	; 0x548 <unlock>
	}
}
 5b6:	ff 91       	pop	r31
 5b8:	ef 91       	pop	r30
 5ba:	bf 91       	pop	r27
 5bc:	af 91       	pop	r26
 5be:	9f 91       	pop	r25
 5c0:	8f 91       	pop	r24
 5c2:	7f 91       	pop	r23
 5c4:	6f 91       	pop	r22
 5c6:	5f 91       	pop	r21
 5c8:	4f 91       	pop	r20
 5ca:	3f 91       	pop	r19
 5cc:	2f 91       	pop	r18
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <__vector_7>:
//Om timern säger till, yielda

ISR(TIMER1_COMPA_vect)
{
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	2f 93       	push	r18
 5e4:	3f 93       	push	r19
 5e6:	4f 93       	push	r20
 5e8:	5f 93       	push	r21
 5ea:	6f 93       	push	r22
 5ec:	7f 93       	push	r23
 5ee:	8f 93       	push	r24
 5f0:	9f 93       	push	r25
 5f2:	af 93       	push	r26
 5f4:	bf 93       	push	r27
 5f6:	ef 93       	push	r30
 5f8:	ff 93       	push	r31
	timekeeper = 1;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <timekeeper+0x1>
 602:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <timekeeper>
	unlock(&m1);
 606:	86 e2       	ldi	r24, 0x26	; 38
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	0e 94 a4 02 	call	0x548	; 0x548 <unlock>
 60e:	ff 91       	pop	r31
 610:	ef 91       	pop	r30
 612:	bf 91       	pop	r27
 614:	af 91       	pop	r26
 616:	9f 91       	pop	r25
 618:	8f 91       	pop	r24
 61a:	7f 91       	pop	r23
 61c:	6f 91       	pop	r22
 61e:	5f 91       	pop	r21
 620:	4f 91       	pop	r20
 622:	3f 91       	pop	r19
 624:	2f 91       	pop	r18
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <__divmodsi4>:
 630:	05 2e       	mov	r0, r21
 632:	97 fb       	bst	r25, 7
 634:	1e f4       	brtc	.+6      	; 0x63c <__divmodsi4+0xc>
 636:	00 94       	com	r0
 638:	0e 94 2f 03 	call	0x65e	; 0x65e <__negsi2>
 63c:	57 fd       	sbrc	r21, 7
 63e:	07 d0       	rcall	.+14     	; 0x64e <__divmodsi4_neg2>
 640:	0e 94 37 03 	call	0x66e	; 0x66e <__udivmodsi4>
 644:	07 fc       	sbrc	r0, 7
 646:	03 d0       	rcall	.+6      	; 0x64e <__divmodsi4_neg2>
 648:	4e f4       	brtc	.+18     	; 0x65c <__divmodsi4_exit>
 64a:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__negsi2>

0000064e <__divmodsi4_neg2>:
 64e:	50 95       	com	r21
 650:	40 95       	com	r20
 652:	30 95       	com	r19
 654:	21 95       	neg	r18
 656:	3f 4f       	sbci	r19, 0xFF	; 255
 658:	4f 4f       	sbci	r20, 0xFF	; 255
 65a:	5f 4f       	sbci	r21, 0xFF	; 255

0000065c <__divmodsi4_exit>:
 65c:	08 95       	ret

0000065e <__negsi2>:
 65e:	90 95       	com	r25
 660:	80 95       	com	r24
 662:	70 95       	com	r23
 664:	61 95       	neg	r22
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	8f 4f       	sbci	r24, 0xFF	; 255
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
 66c:	08 95       	ret

0000066e <__udivmodsi4>:
 66e:	a1 e2       	ldi	r26, 0x21	; 33
 670:	1a 2e       	mov	r1, r26
 672:	aa 1b       	sub	r26, r26
 674:	bb 1b       	sub	r27, r27
 676:	fd 01       	movw	r30, r26
 678:	0d c0       	rjmp	.+26     	; 0x694 <__udivmodsi4_ep>

0000067a <__udivmodsi4_loop>:
 67a:	aa 1f       	adc	r26, r26
 67c:	bb 1f       	adc	r27, r27
 67e:	ee 1f       	adc	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	a2 17       	cp	r26, r18
 684:	b3 07       	cpc	r27, r19
 686:	e4 07       	cpc	r30, r20
 688:	f5 07       	cpc	r31, r21
 68a:	20 f0       	brcs	.+8      	; 0x694 <__udivmodsi4_ep>
 68c:	a2 1b       	sub	r26, r18
 68e:	b3 0b       	sbc	r27, r19
 690:	e4 0b       	sbc	r30, r20
 692:	f5 0b       	sbc	r31, r21

00000694 <__udivmodsi4_ep>:
 694:	66 1f       	adc	r22, r22
 696:	77 1f       	adc	r23, r23
 698:	88 1f       	adc	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	1a 94       	dec	r1
 69e:	69 f7       	brne	.-38     	; 0x67a <__udivmodsi4_loop>
 6a0:	60 95       	com	r22
 6a2:	70 95       	com	r23
 6a4:	80 95       	com	r24
 6a6:	90 95       	com	r25
 6a8:	9b 01       	movw	r18, r22
 6aa:	ac 01       	movw	r20, r24
 6ac:	bd 01       	movw	r22, r26
 6ae:	cf 01       	movw	r24, r30
 6b0:	08 95       	ret

000006b2 <setjmp>:
 6b2:	dc 01       	movw	r26, r24
 6b4:	2d 92       	st	X+, r2
 6b6:	3d 92       	st	X+, r3
 6b8:	4d 92       	st	X+, r4
 6ba:	5d 92       	st	X+, r5
 6bc:	6d 92       	st	X+, r6
 6be:	7d 92       	st	X+, r7
 6c0:	8d 92       	st	X+, r8
 6c2:	9d 92       	st	X+, r9
 6c4:	ad 92       	st	X+, r10
 6c6:	bd 92       	st	X+, r11
 6c8:	cd 92       	st	X+, r12
 6ca:	dd 92       	st	X+, r13
 6cc:	ed 92       	st	X+, r14
 6ce:	fd 92       	st	X+, r15
 6d0:	0d 93       	st	X+, r16
 6d2:	1d 93       	st	X+, r17
 6d4:	cd 93       	st	X+, r28
 6d6:	dd 93       	st	X+, r29
 6d8:	ff 91       	pop	r31
 6da:	ef 91       	pop	r30
 6dc:	8d b7       	in	r24, 0x3d	; 61
 6de:	8d 93       	st	X+, r24
 6e0:	8e b7       	in	r24, 0x3e	; 62
 6e2:	8d 93       	st	X+, r24
 6e4:	8f b7       	in	r24, 0x3f	; 63
 6e6:	8d 93       	st	X+, r24
 6e8:	ed 93       	st	X+, r30
 6ea:	fd 93       	st	X+, r31
 6ec:	88 27       	eor	r24, r24
 6ee:	99 27       	eor	r25, r25
 6f0:	09 94       	ijmp

000006f2 <longjmp>:
 6f2:	dc 01       	movw	r26, r24
 6f4:	cb 01       	movw	r24, r22
 6f6:	81 30       	cpi	r24, 0x01	; 1
 6f8:	91 05       	cpc	r25, r1
 6fa:	81 1d       	adc	r24, r1
 6fc:	2d 90       	ld	r2, X+
 6fe:	3d 90       	ld	r3, X+
 700:	4d 90       	ld	r4, X+
 702:	5d 90       	ld	r5, X+
 704:	6d 90       	ld	r6, X+
 706:	7d 90       	ld	r7, X+
 708:	8d 90       	ld	r8, X+
 70a:	9d 90       	ld	r9, X+
 70c:	ad 90       	ld	r10, X+
 70e:	bd 90       	ld	r11, X+
 710:	cd 90       	ld	r12, X+
 712:	dd 90       	ld	r13, X+
 714:	ed 90       	ld	r14, X+
 716:	fd 90       	ld	r15, X+
 718:	0d 91       	ld	r16, X+
 71a:	1d 91       	ld	r17, X+
 71c:	cd 91       	ld	r28, X+
 71e:	dd 91       	ld	r29, X+
 720:	ed 91       	ld	r30, X+
 722:	fd 91       	ld	r31, X+
 724:	0d 90       	ld	r0, X+
 726:	f8 94       	cli
 728:	fe bf       	out	0x3e, r31	; 62
 72a:	0f be       	out	0x3f, r0	; 63
 72c:	ed bf       	out	0x3d, r30	; 61
 72e:	ed 91       	ld	r30, X+
 730:	fd 91       	ld	r31, X+
 732:	09 94       	ijmp

00000734 <_exit>:
 734:	f8 94       	cli

00000736 <__stop_program>:
 736:	ff cf       	rjmp	.-2      	; 0x736 <__stop_program>
